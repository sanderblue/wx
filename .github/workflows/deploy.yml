name: Build and deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build, push, and deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout master
        uses: actions/checkout@master

      - name: Cache dependencies
        uses: actions/cache@v1
        env:
          cache-name: node-modules-cache
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Build wx-backend
        run: npm run build:wx-backend:prod

      - name: Copy files to VPS via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY_PRIVATE_BLUE_PROJECT_VPS }}
          passphrase: ${{ secrets.SSH_PASSPHRASE_BLUE_PROJECT_VPS }}
          source: '.'
          target: '/var/www/wx'

      - name: Restart wx-backend service
        uses: appleboy/ssh-action@master
        with:
          with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY_PRIVATE_BLUE_PROJECT_VPS }}
          passphrase: ${{ secrets.SSH_PASSPHRASE_BLUE_PROJECT_VPS }}
          script: cp /var/www/newrelic.js /var/www/wx/dist/apps/wx-backend && NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }} pm2 restart /var/www/wx/ecosystem.config.js --env production --update-env

      - name: Create deploy marker
        env:
          NEW_RELIC_REGION: US
          NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
        run: |
          docker pull newrelic/cli
          docker run -i --rm -e NEW_RELIC_API_KEY -e NEW_RELIC_REGION newrelic/cli apm deployment create --accountId  --applicationId ${{ secrets.NEW_RELIC_ACCOUNT_ID }} --revision $GITHUB_SHA
